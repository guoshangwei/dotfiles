#!/usr/bin/env ruby

VERSION = "1.6"

def error(msg)
  $stderr.puts "  #{"\033[31m" if $stderr.tty?}Error#{"\033[0m" if $stderr.tty?} #{msg}"
  exit 1
end

error "Ruby 2.0+ is required!" if RUBY_VERSION <= "2.0"

begin
  require "sshkit"
  require "sshkit/dsl"
  include SSHKit::DSL
rescue LoadError
  error <<-EOS
Please install `sshkit` using:
    gem install sshkit
  EOS
end

begin
  require "terminal-table"
rescue LoadError
  error <<-EOS
Please install `terminal-table` using:
    gem install terminal-table
  EOS
end

require "json"
require "shellwords"
require "timeout"

SSHKit::Backend::Netssh.configure do |ssh|
  ssh.ssh_options = {
    auth_methods: %w(publickey),
    forward_agent: false,
  }
end

# drop remote ssh-agent if we have already logged in csr
if ENV["SSH_AUTH_SOCK"] && `hostname` =~ /csr\d+/
  ENV.delete "SSH_AUTH_SOCK"
end

class Reporter
  attr_reader :servers
  attr_reader :reports

  def initialize(servers)
    @servers = servers.map do |host|
      host.end_with?(".comp.hkbu.edu.hk") ? host : "#{host}.comp.hkbu.edu.hk"
    end
    @reports = []
  end

  def get_report!
    reports = []

    on servers do |host|
      begin
        Timeout::timeout(5) do
          report = JSON.load(capture(:"/usr/bin/ruby", "-e", SCRIPT))
          report["host"] = host.hostname.sub(".comp.hkbu.edu.hk", "")
          reports << report
        end
      rescue Net::SSH::AuthenticationFailed, Net::SSH::Proxy::ConnectError
        warn "Failed to login #{host.hostname}."
      rescue SSHKit::Runner::ExecuteError, SSHKit::Command::Failed
        warn "Failed to get report from #{host.hostname}."
      rescue Timeout::Error
        warn "Failed to get report from #{host.hostname} (timeout)."
      end
    end

    @reports = reports
    reports
  end

  def print(options = {})
    sort_key = options.fetch(:sort_key, :host).to_s
    sort_proc = proc do |record|
      first_value = case sort_key
      when "tmux"
        record["tmux"].size
      when "process"
        [record["process_running"], record["process_all"]]
      when "mem"
        [record["mem_used"], record["mem_total"]]
      when "disk"
        record["disk"][0...-1].to_i
      when "cpu"
        record["cpufreq"] * record["cpusocket"] * record["cpucore"]
      else
        record[sort_key]
      end
      second_value = record["host"]
      [first_value, second_value]
    end
    sorted_reports = reports.sort_by { |record| sort_proc.call(record) }
    sorted_reports.each do |record|
      record["tmux"] = record["tmux"].join(",")
      uptime = record["uptime"]
      record["uptime"] = if uptime < 60
        "%d seconds" % uptime
      else
        uptime = uptime/60
        if uptime < 60
          "%d minutes" % uptime
        else
          uptime = uptime/60
          if uptime < 24
            "%d hours" % uptime
          else
            "%d days" % (uptime/24)
          end
        end
      end
    end

    tmux_width = sorted_reports.map { |record| record["tmux"].size }.max.to_i + 3
    tmux_width = 6 if tmux_width < 6
    uptime_width = sorted_reports.map { |record| record["uptime"].size }.max.to_i + 3
    uptime_width = 8 if uptime_width < 8
    cols = {
      "host" => ["HOST", 9],
      "users" => ["USERS", 8],
      "load_1min" => ["LOAD\n(1min)", 9],
      "load_5min" => ["LOAD\n(5min)", 9],
      "load_10min" => ["LOAD\n(10min)", 10],
      "process" => ["PROCESS", 10],
      "mem" => ["MEM\n(used/total)", 15],
      "disk" => ["DISK\n(used)", 10],
      "cpu" => ["CPU SPEC", 18],
      "uptime" => ["UPTIME", uptime_width],
      "tmux" => ["TMUX", tmux_width],
    }

    width = `/usr/bin/tput cols`.strip.to_i rescue 80
    delete_order = %w[uptime cpu disk process tmux users mem load_10min load_5min]
    cols.delete "tmux" unless sorted_reports.any? { |record| record["tmux_running"] }
    while width < cols.values.map(&:last).reduce(&:+) && !delete_order.empty?
      cols.delete(delete_order.shift)
    end

    rows = sorted_reports.map { |record| cols.keys.map { |k| record[k] } }
    table = Terminal::Table.new headings: cols.values.map(&:first), rows: rows
    puts table
  end

  private

  SCRIPT = <<-'EOS'.shellescape
    def encstr(s)
      '"' + s.chars.map do |c|
        case c[0]
        when ?"  then '\\"'
        when ?\\ then '\\\\'
        when ?\b then '\\b'
        when ?\f then '\\f'
        when ?\n then '\\n'
        when ?\r then '\\r'
        when ?\t then '\\t'
        else c
        end
      end.join + '"'
    end

    users = `/usr/bin/users`.chomp.split(" ").size rescue 0
    load_avg = `/bin/cat /proc/loadavg`.chomp.split(" ")
    uptime = `/bin/cat /proc/uptime`.chomp.split(" ")[0].to_i
    process = load_avg[3]
    process_running, process_all = process.split("/")
    mem = `/usr/bin/free -g`.match(/^Mem: +(\d+) +(\d+)/)
    mem_total = mem[1].to_i
    mem_used = mem[2].to_i
    disk = `/bin/df -h /`[/\d+%/]
    tmux_bin = %W[
      #{ENV["HOME"]}/usr/bin/tmux
      #{ENV["HOME"]}/.linuxbrew/bin/tmux
      #{ENV["HOME"]}/bin/tmux
      /usr/local/bin/tmux
    ].detect { |p| File.executable?(p) }
    tmux = if tmux_bin
      `#{tmux_bin} list-sessions -F "#S"`.split("\n") rescue []
    else
      []
    end
    cpu = `/usr/bin/lscpu`
    cpufreq = cpu[/^Model name:.* ([\d\.]+GHz)$/, 1]
    cpusocket = cpu[/^Socket\(s\): *(\d+)$/, 1].to_i
    cpucore = cpu[/^Core\(s\) per socket: *(\d+)$/, 1].to_i
    puts <<-EOF
    {
      "users": #{users},
      "uptime": #{uptime},
      "load_1min": #{load_avg[0].to_f},
      "load_5min": #{load_avg[1].to_f},
      "load_10min": #{load_avg[2].to_f},
      "process_running": #{process_running.to_i},
      "process_all": #{process_all.to_i},
      "process": "#{process}",
      "mem_total": #{mem_total},
      "mem_used": #{mem_used},
      "mem": "#{"%02i" % mem_used}/#{mem_total} GB",
      "disk": "#{disk}",
      "cpufreq": #{cpufreq[0..-4].to_f},
      "cpusocket": #{cpusocket},
      "cpucore": #{cpucore},
      "cpu": "#{cpufreq} (#{cpusocket}S/#{cpucore}C)",
      "tmux": [#{tmux.map { |s| encstr(s) }.join(",")}],
      "tmux_running": #{tmux.empty? ? "false" : "true"}
    }
    EOF
  EOS
end

if __FILE__ == $0
  require "optparse"

  print_opt = {}
  OptionParser.new do |opts|
    opts.banner = <<-EOS
Usage: csr-report [options] [servers]

Example:
  csr-report               # report csr30 to csr31 and csr40 to csr69 (default)
  csr-report csr40         # report csr40
  csr-report csr40,csr41   # report csr40 and csr41
  csr-report csr40-csr50   # report csr40 to csr50
  csr-report --sort-by=mem # sort report by memory

Accepted sort keys:
  host,users,load_1min,load_5min,load_10min,process,mem,disk,cpu,uptime,tmux
EOS
    opts.version = VERSION

    opts.separator ""
    opts.separator "Report options:"
    opts.on("-sKEY", "--sort-by=KEY", "Sort report by key. Default is host.") do |key|
      print_opt[:sort_key] = key
    end

    opts.separator ""
    opts.separator "Common options:"
    opts.on_tail("-h", "--help", "Show this message") do
      puts opts.help
      exit
    end
    opts.on_tail("-v", "--version", "Show version") do
      puts opts.ver
      exit
    end
  end.parse!

  servers = (ARGV.first || "csr30-csr31,csr40-csr69").split(",").flat_map do |s|
    if s.include?("-")
      start_id, end_id = s.split("-", 2)
      start_id = start_id[/\d+/].to_i
      end_id = end_id[/\d+/].to_i
      (start_id..end_id).map { |id| "csr#{id}" }
    else
      [s]
    end
  end
  reporter = Reporter.new(servers)
  reporter.get_report!
  reporter.print(print_opt)
end

